package com.dt5000.ischool.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dt5000.ischool.entity.green_entity.GroupSendMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_SEND_MESSAGE".
*/
public class GroupSendMessageDao extends AbstractDao<GroupSendMessage, Long> {

    public static final String TABLENAME = "GROUP_SEND_MESSAGE";

    /**
     * Properties of entity GroupSendMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Message_catalogue_id = new Property(3, Long.class, "message_catalogue_id", false, "MESSAGE_CATALOGUE_ID");
        public final static Property Owner = new Property(4, String.class, "owner", false, "OWNER");
        public final static Property ProfileUrl = new Property(5, String.class, "profileUrl", false, "PROFILE_URL");
        public final static Property ReadNames = new Property(6, String.class, "readNames", false, "READ_NAMES");
        public final static Property ReadNum = new Property(7, String.class, "readNum", false, "READ_NUM");
        public final static Property ReceiveNum = new Property(8, String.class, "receiveNum", false, "RECEIVE_NUM");
        public final static Property ReceiverIds = new Property(9, String.class, "receiverIds", false, "RECEIVER_IDS");
        public final static Property ReceiverNames = new Property(10, String.class, "receiverNames", false, "RECEIVER_NAMES");
        public final static Property SendDatetime = new Property(11, String.class, "sendDatetime", false, "SEND_DATETIME");
        public final static Property SenderId = new Property(12, String.class, "senderId", false, "SENDER_ID");
        public final static Property SenderName = new Property(13, String.class, "senderName", false, "SENDER_NAME");
        public final static Property UnReadNames = new Property(14, String.class, "unReadNames", false, "UN_READ_NAMES");
        public final static Property IsReader = new Property(15, int.class, "isReader", false, "IS_READER");
    }


    public GroupSendMessageDao(DaoConfig config) {
        super(config);
    }
    
    public GroupSendMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_SEND_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"MESSAGE_CATALOGUE_ID\" INTEGER," + // 3: message_catalogue_id
                "\"OWNER\" TEXT," + // 4: owner
                "\"PROFILE_URL\" TEXT," + // 5: profileUrl
                "\"READ_NAMES\" TEXT," + // 6: readNames
                "\"READ_NUM\" TEXT," + // 7: readNum
                "\"RECEIVE_NUM\" TEXT," + // 8: receiveNum
                "\"RECEIVER_IDS\" TEXT," + // 9: receiverIds
                "\"RECEIVER_NAMES\" TEXT," + // 10: receiverNames
                "\"SEND_DATETIME\" TEXT," + // 11: sendDatetime
                "\"SENDER_ID\" TEXT," + // 12: senderId
                "\"SENDER_NAME\" TEXT," + // 13: senderName
                "\"UN_READ_NAMES\" TEXT," + // 14: unReadNames
                "\"IS_READER\" INTEGER NOT NULL );"); // 15: isReader
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_SEND_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupSendMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        Long message_catalogue_id = entity.getMessage_catalogue_id();
        if (message_catalogue_id != null) {
            stmt.bindLong(4, message_catalogue_id);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(5, owner);
        }
 
        String profileUrl = entity.getProfileUrl();
        if (profileUrl != null) {
            stmt.bindString(6, profileUrl);
        }
 
        String readNames = entity.getReadNames();
        if (readNames != null) {
            stmt.bindString(7, readNames);
        }
 
        String readNum = entity.getReadNum();
        if (readNum != null) {
            stmt.bindString(8, readNum);
        }
 
        String receiveNum = entity.getReceiveNum();
        if (receiveNum != null) {
            stmt.bindString(9, receiveNum);
        }
 
        String receiverIds = entity.getReceiverIds();
        if (receiverIds != null) {
            stmt.bindString(10, receiverIds);
        }
 
        String receiverNames = entity.getReceiverNames();
        if (receiverNames != null) {
            stmt.bindString(11, receiverNames);
        }
 
        String sendDatetime = entity.getSendDatetime();
        if (sendDatetime != null) {
            stmt.bindString(12, sendDatetime);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(13, senderId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(14, senderName);
        }
 
        String unReadNames = entity.getUnReadNames();
        if (unReadNames != null) {
            stmt.bindString(15, unReadNames);
        }
        stmt.bindLong(16, entity.getIsReader());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupSendMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        Long message_catalogue_id = entity.getMessage_catalogue_id();
        if (message_catalogue_id != null) {
            stmt.bindLong(4, message_catalogue_id);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(5, owner);
        }
 
        String profileUrl = entity.getProfileUrl();
        if (profileUrl != null) {
            stmt.bindString(6, profileUrl);
        }
 
        String readNames = entity.getReadNames();
        if (readNames != null) {
            stmt.bindString(7, readNames);
        }
 
        String readNum = entity.getReadNum();
        if (readNum != null) {
            stmt.bindString(8, readNum);
        }
 
        String receiveNum = entity.getReceiveNum();
        if (receiveNum != null) {
            stmt.bindString(9, receiveNum);
        }
 
        String receiverIds = entity.getReceiverIds();
        if (receiverIds != null) {
            stmt.bindString(10, receiverIds);
        }
 
        String receiverNames = entity.getReceiverNames();
        if (receiverNames != null) {
            stmt.bindString(11, receiverNames);
        }
 
        String sendDatetime = entity.getSendDatetime();
        if (sendDatetime != null) {
            stmt.bindString(12, sendDatetime);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(13, senderId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(14, senderName);
        }
 
        String unReadNames = entity.getUnReadNames();
        if (unReadNames != null) {
            stmt.bindString(15, unReadNames);
        }
        stmt.bindLong(16, entity.getIsReader());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupSendMessage readEntity(Cursor cursor, int offset) {
        GroupSendMessage entity = new GroupSendMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // message_catalogue_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // owner
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // profileUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // readNames
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // readNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // receiveNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // receiverIds
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // receiverNames
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sendDatetime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // senderId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // senderName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // unReadNames
            cursor.getInt(offset + 15) // isReader
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupSendMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage_catalogue_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setOwner(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProfileUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReadNames(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReadNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReceiveNum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReceiverIds(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReceiverNames(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSendDatetime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSenderId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSenderName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUnReadNames(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsReader(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupSendMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupSendMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupSendMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
