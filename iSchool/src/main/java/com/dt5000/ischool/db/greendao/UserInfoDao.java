package com.dt5000.ischool.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dt5000.ischool.entity.green_entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Role = new Property(2, String.class, "role", false, "ROLE");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Pwd = new Property(4, String.class, "pwd", false, "PWD");
        public final static Property ProfileUrl = new Property(5, String.class, "profileUrl", false, "PROFILE_URL");
        public final static Property RealName = new Property(6, String.class, "realName", false, "REAL_NAME");
        public final static Property RelevanceNum = new Property(7, int.class, "relevanceNum", false, "RELEVANCE_NUM");
        public final static Property Relevance_UserId = new Property(8, String.class, "relevance_UserId", false, "RELEVANCE__USER_ID");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"ROLE\" TEXT," + // 2: role
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"PWD\" TEXT," + // 4: pwd
                "\"PROFILE_URL\" TEXT," + // 5: profileUrl
                "\"REAL_NAME\" TEXT," + // 6: realName
                "\"RELEVANCE_NUM\" INTEGER NOT NULL ," + // 7: relevanceNum
                "\"RELEVANCE__USER_ID\" TEXT);"); // 8: relevance_UserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(3, role);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(5, pwd);
        }
 
        String profileUrl = entity.getProfileUrl();
        if (profileUrl != null) {
            stmt.bindString(6, profileUrl);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(7, realName);
        }
        stmt.bindLong(8, entity.getRelevanceNum());
 
        String relevance_UserId = entity.getRelevance_UserId();
        if (relevance_UserId != null) {
            stmt.bindString(9, relevance_UserId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(3, role);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(5, pwd);
        }
 
        String profileUrl = entity.getProfileUrl();
        if (profileUrl != null) {
            stmt.bindString(6, profileUrl);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(7, realName);
        }
        stmt.bindLong(8, entity.getRelevanceNum());
 
        String relevance_UserId = entity.getRelevance_UserId();
        if (relevance_UserId != null) {
            stmt.bindString(9, relevance_UserId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // role
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pwd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // profileUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // realName
            cursor.getInt(offset + 7), // relevanceNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // relevance_UserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRole(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPwd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProfileUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRealName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRelevanceNum(cursor.getInt(offset + 7));
        entity.setRelevance_UserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
